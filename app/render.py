from typing import Dict, List

def render_markdown(meeting: Dict, items: List[Dict]) -> str:
    dec = [i for i in items if i.get("type") == "Decision"]
    act = [i for i in items if i.get("type") == "Action"]
    risk = [i for i in items if i.get("type") == "Risk"]

    lines = [f"# {meeting.get('title','Meeting')} — Smart Summary\n"]
    if dec:
        lines.append("## Decisions")
        for d in dec:
            who = d.get("speaker","N/A")
            ts = d.get("ts","")
            lines.append(f"- {d.get('title')} *(Decider: {who}, {ts})*")
    if act:
        lines.append("\n## Action Items")
        for a in act:
            owner = a.get("owner") or a.get("speaker","N/A")
            due = a.get("due_date","TBD")
            ts = a.get("ts","")
            lines.append(f"- **{owner}** — {a.get('title')} *(Due: {due}, {ts})*")
    if risk:
        lines.append("\n## Risks")
        for r in risk:
            p = f"{r.get('probability',0):.2f}" if isinstance(r.get("probability"), (int,float)) else r.get("probability","0.00")
            sev = r.get("severity","")
            mit = r.get("mitigation","")
            ts = r.get("ts","")
            lines.append(f"- **{r.get('title')}** *(p={p}, {sev}, {ts})* — {mit}")
    lines.append("\n---\nGenerated by Silent Meeting Observer.")
    return "\n".join(lines)
